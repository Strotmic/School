using System;
using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;
using Microsoft.Azure.Cosmos;
using examen.exercise1.models;

namespace examen.exercise1;

public static class AddChild
{
    private static readonly string CosmosUrl = Environment.GetEnvironmentVariable("CosmosUrl");
    private static readonly string CosmosKey = Environment.GetEnvironmentVariable("CosmosKey");
    private static readonly CosmosClient CosmosClient = new CosmosClient(CosmosUrl, CosmosKey);
    private static readonly Container Container = CosmosClient.GetContainer("School", "Children");

    [FunctionName("AddChild")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "post", Route = "children")] HttpRequest req)
    {
        string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
        Child child = JsonConvert.DeserializeObject<Child>(requestBody);

        child.Id = GenerateRegistrationNumber(); // Generate a unique registration number

        if (!IsValidChild(child))
        {
            return new BadRequestObjectResult("Invalid child data.");
        }

        try
        {
            await Container.CreateItemAsync(child, new PartitionKey(child.Class));
            return new OkObjectResult(child);
        }
        catch (Exception ex)
        {
            return new StatusCodeResult(StatusCodes.Status500InternalServerError);
        }
    }

    private static string GenerateRegistrationNumber()
    {
        // Implement logic to generate a unique registration number
        // Example: "K" + 7 random digits
        var random = new Random();
        return "K" + random.Next(1000000, 9999999).ToString();
    }

    private static bool IsValidChild(Child child)
    {
        // Validate child data except for the Id which is now generated by the program
        return !string.IsNullOrEmpty(child.Name) &&
               !string.IsNullOrEmpty(child.FirstName) &&
               !string.IsNullOrEmpty(child.Class) &&
               !string.IsNullOrEmpty(child.ParentEmail);
    }
}